/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class apiClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "/api";
    }

    /**
     * create activity
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    post_activity(payload: Activity, x_Fields: string | null | undefined): Observable<Activity> {
        let url_ = this.baseUrl + "/activity/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payload);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost_activity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost_activity(<any>response_);
                } catch (e) {
                    return <Observable<Activity>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity>><any>_observableThrow(response_);
        }));
    }

    protected processPost_activity(response: HttpResponseBase): Observable<Activity> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Activity.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity>(<any>null);
    }

    /**
     * Get a specific user's data by their username
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_activity(x_Fields: string | null | undefined): Observable<Activity[]> {
        let url_ = this.baseUrl + "/activity/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_activity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_activity(<any>response_);
                } catch (e) {
                    return <Observable<Activity[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet_activity(response: HttpResponseBase): Observable<Activity[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Activity.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity[]>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_activity_manager(x_Fields: string | null | undefined): Observable<Activity[]> {
        let url_ = this.baseUrl + "/activity/manage_activities";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_activity_manager(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_activity_manager(<any>response_);
                } catch (e) {
                    return <Observable<Activity[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet_activity_manager(response: HttpResponseBase): Observable<Activity[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Activity.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity[]>(<any>null);
    }

    /**
     * Get a specific user's data by their username
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_single_activity(x_Fields: string | null | undefined, id: number): Observable<Activity> {
        let url_ = this.baseUrl + "/activity/single/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_single_activity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_single_activity(<any>response_);
                } catch (e) {
                    return <Observable<Activity>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity>><any>_observableThrow(response_);
        }));
    }

    protected processGet_single_activity(response: HttpResponseBase): Observable<Activity> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Activity.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_activity_details(x_Fields: string | null | undefined, activity_id: string): Observable<Activity_detail[]> {
        let url_ = this.baseUrl + "/activity_detail/{activity_id}";
        if (activity_id === undefined || activity_id === null)
            throw new Error("The parameter 'activity_id' must be defined.");
        url_ = url_.replace("{activity_id}", encodeURIComponent("" + activity_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_activity_details(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_activity_details(<any>response_);
                } catch (e) {
                    return <Observable<Activity_detail[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity_detail[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet_activity_details(response: HttpResponseBase): Observable<Activity_detail[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Activity_detail.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity_detail[]>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    post_activity_plan(payload: Activity_plan, x_Fields: string | null | undefined, activity_id: number): Observable<Activity_plan> {
        let url_ = this.baseUrl + "/activity_plan/{activity_id}";
        if (activity_id === undefined || activity_id === null)
            throw new Error("The parameter 'activity_id' must be defined.");
        url_ = url_.replace("{activity_id}", encodeURIComponent("" + activity_id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payload);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost_activity_plan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost_activity_plan(<any>response_);
                } catch (e) {
                    return <Observable<Activity_plan>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity_plan>><any>_observableThrow(response_);
        }));
    }

    protected processPost_activity_plan(response: HttpResponseBase): Observable<Activity_plan> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Activity_plan.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity_plan>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_activity_plan(x_Fields: string | null | undefined, activity_id: number): Observable<Activity_plan[]> {
        let url_ = this.baseUrl + "/activity_plan/{activity_id}";
        if (activity_id === undefined || activity_id === null)
            throw new Error("The parameter 'activity_id' must be defined.");
        url_ = url_.replace("{activity_id}", encodeURIComponent("" + activity_id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_activity_plan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_activity_plan(<any>response_);
                } catch (e) {
                    return <Observable<Activity_plan[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Activity_plan[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet_activity_plan(response: HttpResponseBase): Observable<Activity_plan[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Activity_plan.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Activity_plan[]>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    post_all_bookings(payload: Booking, x_Fields: string | null | undefined): Observable<Booking> {
        let url_ = this.baseUrl + "/booking/";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payload);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost_all_bookings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost_all_bookings(<any>response_);
                } catch (e) {
                    return <Observable<Booking>><any>_observableThrow(e);
                }
            } else
                return <Observable<Booking>><any>_observableThrow(response_);
        }));
    }

    protected processPost_all_bookings(response: HttpResponseBase): Observable<Booking> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Booking.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Booking>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_all_bookings(x_Fields: string | null | undefined): Observable<Booking[]> {
        let url_ = this.baseUrl + "/booking/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_all_bookings(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_all_bookings(<any>response_);
                } catch (e) {
                    return <Observable<Booking[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Booking[]>><any>_observableThrow(response_);
        }));
    }

    protected processGet_all_bookings(response: HttpResponseBase): Observable<Booking[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Booking.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Booking[]>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_booking(x_Fields: string | null | undefined, id: number): Observable<Booking> {
        let url_ = this.baseUrl + "/booking/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_booking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_booking(<any>response_);
                } catch (e) {
                    return <Observable<Booking>><any>_observableThrow(e);
                }
            } else
                return <Observable<Booking>><any>_observableThrow(response_);
        }));
    }

    protected processGet_booking(response: HttpResponseBase): Observable<Booking> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Booking.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Booking>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_payment(x_Fields: string | null | undefined): Observable<Payment> {
        let url_ = this.baseUrl + "/payment/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_payment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_payment(<any>response_);
                } catch (e) {
                    return <Observable<Payment>><any>_observableThrow(e);
                }
            } else
                return <Observable<Payment>><any>_observableThrow(response_);
        }));
    }

    protected processGet_payment(response: HttpResponseBase): Observable<Payment> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Payment.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Payment>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_rating(x_Fields: string | null | undefined): Observable<Rating> {
        let url_ = this.baseUrl + "/rating/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_rating(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_rating(<any>response_);
                } catch (e) {
                    return <Observable<Rating>><any>_observableThrow(e);
                }
            } else
                return <Observable<Rating>><any>_observableThrow(response_);
        }));
    }

    protected processGet_rating(response: HttpResponseBase): Observable<Rating> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Rating.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Rating>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_review(x_Fields: string | null | undefined): Observable<Review> {
        let url_ = this.baseUrl + "/review/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_review(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_review(<any>response_);
                } catch (e) {
                    return <Observable<Review>><any>_observableThrow(e);
                }
            } else
                return <Observable<Review>><any>_observableThrow(response_);
        }));
    }

    protected processGet_review(response: HttpResponseBase): Observable<Review> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Review.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Review>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_traveller(x_Fields: string | null | undefined): Observable<Traveller> {
        let url_ = this.baseUrl + "/traveller/";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_traveller(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_traveller(<any>response_);
                } catch (e) {
                    return <Observable<Traveller>><any>_observableThrow(e);
                }
            } else
                return <Observable<Traveller>><any>_observableThrow(response_);
        }));
    }

    protected processGet_traveller(response: HttpResponseBase): Observable<Traveller> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Traveller.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Traveller>(<any>null);
    }

    /**
     * create activity
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    post_user(payload: User, x_Fields: string | null | undefined, id: string): Observable<User> {
        let url_ = this.baseUrl + "/user/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(payload);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost_user(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost_user(<any>response_);
                } catch (e) {
                    return <Observable<User>><any>_observableThrow(e);
                }
            } else
                return <Observable<User>><any>_observableThrow(response_);
        }));
    }

    protected processPost_user(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(<any>null);
    }

    /**
     * @param x_Fields (optional) An optional fields mask
     * @return Success
     */
    get_user(x_Fields: string | null | undefined, id: string): Observable<User> {
        let url_ = this.baseUrl + "/user/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "X-Fields": x_Fields !== undefined && x_Fields !== null ? "" + x_Fields : "",
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet_user(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet_user(<any>response_);
                } catch (e) {
                    return <Observable<User>><any>_observableThrow(e);
                }
            } else
                return <Observable<User>><any>_observableThrow(response_);
        }));
    }

    protected processGet_user(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(<any>null);
    }
}

export class Activity_detail {
    id?: number | undefined;
    activity_id?: number | undefined;
    section_name?: string | undefined;
    section_text?: string | undefined;
    section_style?: string | undefined;
    section_media?: string | undefined;
    section_number?: number | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.activity_id = _data["activity_id"];
            this.section_name = _data["section_name"];
            this.section_text = _data["section_text"];
            this.section_style = _data["section_style"];
            this.section_media = _data["section_media"];
            this.section_number = _data["section_number"];
        }
    }

    static fromJS(data: any): Activity_detail {
        data = typeof data === 'object' ? data : {};
        let result = new Activity_detail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activity_id"] = this.activity_id;
        data["section_name"] = this.section_name;
        data["section_text"] = this.section_text;
        data["section_style"] = this.section_style;
        data["section_media"] = this.section_media;
        data["section_number"] = this.section_number;
        return data; 
    }
}

export class Activity {
    id?: number | undefined;
    user_id?: number | undefined;
    name?: string | undefined;
    trending?: number | undefined;
    state?: string | undefined;
    category?: string | undefined;
    duration?: string | undefined;
    tags?: string | undefined;
    difficulty?: string | undefined;
    stars?: number | undefined;
    card_image?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.user_id = _data["user_id"];
            this.name = _data["name"];
            this.trending = _data["trending"];
            this.state = _data["state"];
            this.category = _data["category"];
            this.duration = _data["duration"];
            this.tags = _data["tags"];
            this.difficulty = _data["difficulty"];
            this.stars = _data["stars"];
            this.card_image = _data["card_image"];
        }
    }

    static fromJS(data: any): Activity {
        data = typeof data === 'object' ? data : {};
        let result = new Activity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["user_id"] = this.user_id;
        data["name"] = this.name;
        data["trending"] = this.trending;
        data["state"] = this.state;
        data["category"] = this.category;
        data["duration"] = this.duration;
        data["tags"] = this.tags;
        data["difficulty"] = this.difficulty;
        data["stars"] = this.stars;
        data["card_image"] = this.card_image;
        return data; 
    }
}

export class Activity_plan {
    id?: number | undefined;
    activity_id?: number | undefined;
    start_date?: Date | undefined;
    end_date?: Date | undefined;
    max_allowed?: number | undefined;
    price?: number | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.activity_id = _data["activity_id"];
            this.start_date = _data["start_date"] ? new Date(_data["start_date"].toString()) : <any>undefined;
            this.end_date = _data["end_date"] ? new Date(_data["end_date"].toString()) : <any>undefined;
            this.max_allowed = _data["max_allowed"];
            this.price = _data["price"];
        }
    }

    static fromJS(data: any): Activity_plan {
        data = typeof data === 'object' ? data : {};
        let result = new Activity_plan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["activity_id"] = this.activity_id;
        data["start_date"] = this.start_date ? this.start_date.toISOString() : <any>undefined;
        data["end_date"] = this.end_date ? this.end_date.toISOString() : <any>undefined;
        data["max_allowed"] = this.max_allowed;
        data["price"] = this.price;
        return data; 
    }
}

export class Booking {
    id?: number | undefined;
    booked_by_user_id?: number | undefined;
    activity_plan_id?: number | undefined;
    ticket_count?: number | undefined;
    booking_price?: number | undefined;
    booking_time?: Date | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.booked_by_user_id = _data["booked_by_user_id"];
            this.activity_plan_id = _data["activity_plan_id"];
            this.ticket_count = _data["ticket_count"];
            this.booking_price = _data["booking_price"];
            this.booking_time = _data["booking_time"] ? new Date(_data["booking_time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Booking {
        data = typeof data === 'object' ? data : {};
        let result = new Booking();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["booked_by_user_id"] = this.booked_by_user_id;
        data["activity_plan_id"] = this.activity_plan_id;
        data["ticket_count"] = this.ticket_count;
        data["booking_price"] = this.booking_price;
        data["booking_time"] = this.booking_time ? this.booking_time.toISOString() : <any>undefined;
        return data; 
    }
}

export class Payment {
    id?: number | undefined;
    booking_id?: number | undefined;
    order_id?: string | undefined;
    status?: string | undefined;
    order_creation_time?: Date | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.booking_id = _data["booking_id"];
            this.order_id = _data["order_id"];
            this.status = _data["status"];
            this.order_creation_time = _data["order_creation_time"] ? new Date(_data["order_creation_time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Payment {
        data = typeof data === 'object' ? data : {};
        let result = new Payment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["booking_id"] = this.booking_id;
        data["order_id"] = this.order_id;
        data["status"] = this.status;
        data["order_creation_time"] = this.order_creation_time ? this.order_creation_time.toISOString() : <any>undefined;
        return data; 
    }
}

export class Rating {
    id?: number | undefined;
    user_id?: number | undefined;
    activity_id?: number | undefined;
    review?: string | undefined;
    date?: Date | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.user_id = _data["user_id"];
            this.activity_id = _data["activity_id"];
            this.review = _data["review"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Rating {
        data = typeof data === 'object' ? data : {};
        let result = new Rating();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["user_id"] = this.user_id;
        data["activity_id"] = this.activity_id;
        data["review"] = this.review;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data; 
    }
}

export class Review {
    id?: number | undefined;
    user_id?: number | undefined;
    activity_id?: number | undefined;
    review?: string | undefined;
    date?: Date | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.user_id = _data["user_id"];
            this.activity_id = _data["activity_id"];
            this.review = _data["review"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Review {
        data = typeof data === 'object' ? data : {};
        let result = new Review();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["user_id"] = this.user_id;
        data["activity_id"] = this.activity_id;
        data["review"] = this.review;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data; 
    }
}

export class Traveller {
    id?: number | undefined;
    booking_id?: number | undefined;
    user_id?: number | undefined;
    email?: string | undefined;
    name?: string | undefined;
    age?: string | undefined;
    sex?: string | undefined;
    height?: number | undefined;
    mobile?: string | undefined;
    emergency_contact?: string | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.booking_id = _data["booking_id"];
            this.user_id = _data["user_id"];
            this.email = _data["email"];
            this.name = _data["name"];
            this.age = _data["age"];
            this.sex = _data["sex"];
            this.height = _data["height"];
            this.mobile = _data["mobile"];
            this.emergency_contact = _data["emergency_contact"];
        }
    }

    static fromJS(data: any): Traveller {
        data = typeof data === 'object' ? data : {};
        let result = new Traveller();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["booking_id"] = this.booking_id;
        data["user_id"] = this.user_id;
        data["email"] = this.email;
        data["name"] = this.name;
        data["age"] = this.age;
        data["sex"] = this.sex;
        data["height"] = this.height;
        data["mobile"] = this.mobile;
        data["emergency_contact"] = this.emergency_contact;
        return data; 
    }
}

export class User {
    id?: number | undefined;
    social_id?: string | undefined;
    name?: string | undefined;
    email?: string | undefined;
    is_operator?: boolean | undefined;
    contact_number?: string | undefined;
    bank_account_number?: string | undefined;
    minimum_balance?: number | undefined;

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.social_id = _data["social_id"];
            this.name = _data["name"];
            this.email = _data["email"];
            this.is_operator = _data["is_operator"];
            this.contact_number = _data["contact_number"];
            this.bank_account_number = _data["bank_account_number"];
            this.minimum_balance = _data["minimum_balance"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["social_id"] = this.social_id;
        data["name"] = this.name;
        data["email"] = this.email;
        data["is_operator"] = this.is_operator;
        data["contact_number"] = this.contact_number;
        data["bank_account_number"] = this.bank_account_number;
        data["minimum_balance"] = this.minimum_balance;
        return data; 
    }
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}